# Docker Compose for Local Production Testing
# This file is used to test the production build locally

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: tender-hub-postgres
    environment:
      POSTGRES_DB: tenderhub
      POSTGRES_USER: tenderhub
      POSTGRES_PASSWORD: tenderhub_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./drizzle:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - tender-hub-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tenderhub -d tenderhub"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for Caching and Rate Limiting
  redis:
    image: redis:7-alpine
    container_name: tender-hub-redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - tender-hub-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Tender Hub Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tender-hub-app
    environment:
      # Database Configuration
      DATABASE_URL: "postgresql://tenderhub:tenderhub_password@postgres:5432/tenderhub?sslmode=disable"
      
      # Better Auth Configuration
      BETTER_AUTH_SECRET: "local-production-test-secret-key-32-chars-min"
      BETTER_AUTH_URL: "http://localhost:3000"
      
      # Email Configuration (use staging/test values)
      RESEND_API_KEY: "re_test_key_for_local_testing"
      EMAIL_FROM: "Tender Hub Local <test@localhost>"
      
      # Environment
      NODE_ENV: "production"
      NEXT_PUBLIC_APP_URL: "http://localhost:3000"
      
      # Session Configuration
      SESSION_EXPIRES_IN: "86400"  # 1 day for testing
      SESSION_UPDATE_AGE: "3600"   # 1 hour
      SESSION_FRESH_AGE: "300"     # 5 minutes
      
      # Rate Limiting (more lenient for local testing)
      RATE_LIMIT_GLOBAL_MAX: "200"
      RATE_LIMIT_SIGNIN_MAX: "10"
      RATE_LIMIT_SIGNUP_MAX: "10"
      RATE_LIMIT_PASSWORD_RESET_MAX: "5"
      RATE_LIMIT_API_MAX: "100"
      
      # Redis Configuration
      REDIS_URL: "redis://:redis_password@redis:6379"
      
      # Security Configuration
      CSRF_SECRET: "local-production-csrf-secret-32-chars-min"
      
      # Audit Logging
      AUDIT_LOG_RETENTION_DAYS: "7"
      AUDIT_LOG_LEVEL: "info"
      
      # Performance Monitoring
      PERFORMANCE_MONITORING_ENABLED: "true"
      PERFORMANCE_THRESHOLD_MS: "1000"
      
      # Cache Configuration
      CACHE_TTL_DEFAULT: "60"
      CACHE_TTL_PUBLISHERS: "300"
      CACHE_TTL_PROVINCES: "600"
      
      # Health Check Configuration
      HEALTH_CHECK_TIMEOUT: "5000"
      HEALTH_CHECK_DATABASE_ENABLED: "true"
      HEALTH_CHECK_EMAIL_ENABLED: "false"  # Disable for local testing
      
      # Feature Flags
      FEATURE_BULK_INVITATIONS: "true"
      FEATURE_ADVANCED_ANALYTICS: "true"
      FEATURE_AUDIT_DASHBOARD: "true"
      FEATURE_DEBUG_MODE: "false"
      
      # Testing Configuration
      TEST_MODE: "local-production"
      ALLOW_TEST_USERS: "true"
      MOCK_EMAIL_DELIVERY: "true"
    
    ports:
      - "3000:3000"
    networks:
      - tender-hub-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    volumes:
      # Mount logs directory for debugging
      - ./logs:/app/logs

  # Nginx Reverse Proxy (optional, for testing production-like setup)
  nginx:
    image: nginx:alpine
    container_name: tender-hub-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - tender-hub-network
    depends_on:
      - app
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  tender-hub-network:
    driver: bridge